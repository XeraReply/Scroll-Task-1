const axios = require('axios');

// Fetch liquidity breakdown from 0x Swap API
const route = {
    "fills": [
        {
            "from": "0x5300000000000000000000000000000000000004",
            "to": "0x06efdbff2a14a7c8e15944d1f4a48f9f95f663a4",
            "source": "Ambient",
            "proportionBps": "5000"
        },
        {
            "from": "0x06efdbff2a14a7c8e15944d1f4a48f9f95f663a4",
            "to": "0xf610a9dfb7c89644979b4a0f27063e9e7d7cda32",
            "source": "Nuri_CL",
            "proportionBps": "5000"
        }
    ]
};

// Function to display liquidity breakdown
function displayLiquidityBreakdown(route) {
    const totalProportion = route.fills.reduce((acc, fill) => acc + parseInt(fill.proportionBps), 0);
    console.log(`${route.fills.length} Sources`);

    route.fills.forEach((fill) => {
        const source = fill.source;
        const proportion = (parseInt(fill.proportionBps) / 100).toFixed(2); // Convert BPS to percentage
        console.log(`${source}: ${proportion}%`);
    });
}

// Example token metadata
const tokenMetadata = {
    "buyToken": {
        "buyTaxBps": "200", // 200 basis points = 2%
        "sellTaxBps": "147" // 147 basis points = 1.47%
    },
    "sellToken": {
        "buyTaxBps": "0",
        "sellTaxBps": "0"
    }
};

// Function to display buy/sell tax info
function displayBuySellTaxes(tokenMetadata) {
    const buyTokenBuyTax = (parseInt(tokenMetadata.buyToken.buyTaxBps) / 100).toFixed(2);
    const sellTokenSellTax = (parseInt(tokenMetadata.sellToken.sellTaxBps) / 100).toFixed(2);

    console.log(`Buy Token Buy Tax: ${buyTokenBuyTax}%`);
    console.log(`Sell Token Sell Tax: ${sellTokenSellTax}%`);
}

// Query the 0x Swap API for liquidity sources on the Scroll chain
async function getLiquiditySources() {
    const url = 'https://api.0x.org/swap/v1/sources';
    
    const params = {
        chainId: 11155111 // Sepolia Testnet chain ID (for Scroll, replace with actual chain ID)
    };

    try {
        const response = await axios.get(url, { params });
        const sources = response.data;
        console.log("Liquidity sources for Scroll chain:");
        sources.forEach((source) => {
            console.log(source.name);
        });
    } catch (error) {
        console.error("Error fetching liquidity sources:", error);
    }
}

// Function to fetch quote with monetization (affiliate and slippage)
async function getQuoteWithMonetization(buyToken, sellToken, amount) {
    const url = 'https://api.0x.org/swap/v1/quote';
    
    const params = {
        buyToken,
        sellToken,
        amount,
        affiliateAddress: "0xYourAffiliateAddressHere", // Replace with your affiliate address
        slippage: 1, // 1% slippage for surplus collection
    };

    try {
        const response = await axios.get(url, { params });
        console.log("Quote Response:", response.data);
    } catch (error) {
        console.error("Error fetching quote:", error);
    }
}

// Example usage
async function main() {
    // Display liquidity breakdown
    console.log("Displaying Liquidity Breakdown...");
    displayLiquidityBreakdown(route);

    // Display buy/sell taxes for tokens
    console.log("\nDisplaying Buy/Sell Taxes...");
    displayBuySellTaxes(tokenMetadata);

    // Fetch liquidity sources on the Scroll chain
    console.log("\nFetching Liquidity Sources...");
    await getLiquiditySources();

    // Fetch quote with monetization enabled (replace with real token addresses and amount)
    console.log("\nFetching Quote with Monetization...");
    const buyToken = "0xAddressOfBuyToken";  // Replace with real buy token address
    const sellToken = "0xAddressOfSellToken"; // Replace with real sell token address
    const amount = "1000000000000000000"; // Amount in the smallest unit (e.g., 1 token)
    await getQuoteWithMonetization(buyToken, sellToken, amount);
}

// Execute main function
main();
